apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    gen3.io/network-ingress: portal,sowerjob
    meta.helm.sh/release-name: gen3-dev
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2023-12-11T21:35:12Z"
  generation: 1
  labels:
    app: revproxy
    app.kubernetes.io/instance: gen3-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: revproxy
    app.kubernetes.io/part-of: Front-End
    app.kubernetes.io/version: 0.1.12
    critical-service: "true"
    release: production
  name: revproxy-deployment
  namespace: default
  resourceVersion: "257746"
  uid: d6908beb-8ddb-4884-87e7-7affef2cf613
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: revproxy
      app.kubernetes.io/instance: gen3-dev
      app.kubernetes.io/name: revproxy
      release: production
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: revproxy
        app.kubernetes.io/instance: gen3-dev
        app.kubernetes.io/name: revproxy
        release: production
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - revproxy
              topologyKey: kubernetes.io/hostname
            weight: 100
      automountServiceAccountToken: false
      containers:
      - args:
        - -c
        - |
          for name in ngx_http_perl_module.so ngx_http_js_module.so ngx_http_headers_more_filter_module.so ngx_http_modsecurity_module.so; do
            if [ -f /etc/nginx/modules/$name ]; then
              echo "load_module modules/$name;" >> /etc/nginx/gen3_modules.conf
            fi
          done
          if [ -f /etc/nginx/modules/ngx_http_modsecurity_module.so -a -f /etc/nginx/modsec/main.conf ]; then
            echo "modsecurity on;" >> /etc/nginx/gen3_server_modsec.conf
            echo "modsecurity_rules_file /etc/nginx/modsec/main.conf;" >> /etc/nginx/gen3_server_modsec.conf
          fi

          exec nginx -g 'daemon off;'
        command:
        - /bin/sh
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: MAINTENANCE_MODE
          valueFrom:
            configMapKeyRef:
              key: maintenance_mode
              name: manifest-global
              optional: true
        - name: FRONTEND_ROOT
          valueFrom:
            configMapKeyRef:
              key: frontend_root
              name: manifest-global
              optional: true
        - name: ORIGINS_ALLOW_CREDENTIALS
          valueFrom:
            configMapKeyRef:
              key: origins_allow_credentials
              name: manifest-global
              optional: true
        - name: COOKIE_DOMAIN
          valueFrom:
            configMapKeyRef:
              key: cookie_domain
              name: manifest-global
              optional: true
        - name: DES_NAMESPACE
          valueFrom:
            configMapKeyRef:
              key: des_namespace
              name: manifest-global
              optional: true
        - name: INDEXD_AUTHZ
          valueFrom:
            secretKeyRef:
              key: base64Authz.txt
              name: gateway-g3auto
              optional: true
        - name: MDS_AUTHZ
          valueFrom:
            secretKeyRef:
              key: base64Authz.txt
              name: metadata-g3auto
              optional: true
        image: nginx:stable-perl
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /_status
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: revproxy
        ports:
        - containerPort: 80
          protocol: TCP
        - containerPort: 443
          protocol: TCP
        - containerPort: 6567
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /_status
            port: 80
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 12Mi
        securityContext: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: revproxy-conf
          readOnly: true
          subPath: nginx.conf
        - mountPath: /etc/nginx/helpers.js
          name: revproxy-conf
          readOnly: true
          subPath: helpers.js
        - mountPath: /etc/nginx/gen3.conf
          name: revproxy-subconf
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: revproxy-nginx-conf
        name: revproxy-conf
      - configMap:
          defaultMode: 420
          name: revproxy-nginx-subconf
        name: revproxy-subconf
