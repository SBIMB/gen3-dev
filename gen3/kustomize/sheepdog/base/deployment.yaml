apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    gen3.io/network-ingress: sheepdog
    meta.helm.sh/release-name: gen3-dev
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2023-12-11T21:35:12Z"
  generation: 1
  labels:
    app: sheepdog
    app.kubernetes.io/instance: gen3-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: sheepdog
    app.kubernetes.io/part-of: Core-Service
    app.kubernetes.io/version: 0.1.11
    critical-service: "true"
    release: production
  name: sheepdog-deployment
  namespace: default
  resourceVersion: "258152"
  uid: 2548bb87-63ec-4153-8ca0-e1da12d0e74d
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: sheepdog
      app.kubernetes.io/instance: gen3-dev
      app.kubernetes.io/name: sheepdog
      release: production
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: sheepdog
        app.kubernetes.io/instance: gen3-dev
        app.kubernetes.io/name: sheepdog
        netnolimit: "yes"
        public: "yes"
        release: production
        s3: "yes"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sheepdog
              topologyKey: kubernetes.io/hostname
            weight: 100
      automountServiceAccountToken: false
      containers:
      - env:
        - name: CONF_HOSTNAME
          value: cloud08
        - name: FENCE_DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: fence-dbcreds
              optional: false
        - name: FENCE_DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: fence-dbcreds
              optional: false
        - name: FENCE_DB_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: fence-dbcreds
              optional: false
        - name: FENCE_DB_DBNAME
          valueFrom:
            secretKeyRef:
              key: database
              name: fence-dbcreds
              optional: false
        - name: DBREADY_FENCE
          valueFrom:
            secretKeyRef:
              key: dbcreated
              name: fence-dbcreds
              optional: false
        - name: FLASK_SECRET_KEY
          value: 'TODO: FIX THIS!!!'
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              key: host
              name: sheepdog-dbcreds
              optional: false
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: username
              name: sheepdog-dbcreds
              optional: false
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: sheepdog-dbcreds
              optional: false
        - name: PGDB
          valueFrom:
            secretKeyRef:
              key: database
              name: sheepdog-dbcreds
              optional: false
        - name: DBREADY
          valueFrom:
            secretKeyRef:
              key: dbcreated
              name: sheepdog-dbcreds
              optional: false
        - name: PUBLIC_DATASETS
          valueFrom:
            configMapKeyRef:
              key: public_datasets
              name: manifest-global
              optional: true
        - name: INDEXD_PASS
          valueFrom:
            secretKeyRef:
              key: sheepdog
              name: indexd-service-creds
              optional: false
        - name: GEN3_UWSGI_TIMEOUT
          value: "600"
        - name: DICTIONARY_URL
          value: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
        - name: INDEX_CLIENT_HOST
          value: http://indexd-service
        - name: FENCE_URL
          value: http://fence-service
        - name: ARBORIST_URL
          value: http://arborist-service
        - name: AUTH_NAMESPACE
          value: default
        - name: GEN3_DEBUG
          value: "True"
        image: quay.io/cdis/sheepdog:helm-test
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /_status?timeout=20
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 30
        name: sheepdog
        ports:
        - containerPort: 80
          protocol: TCP
        - containerPort: 443
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /_status?timeout=2
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 300m
            memory: 12Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/www/sheepdog/wsgi.py
          name: config-volume
          readOnly: true
          subPath: wsgi.py
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - -c
        - |
          #
          # sheepdog sets up core data model now,
          # but suffers from a race condition doing it ...
          #
          echo datamodel_postgres_admin create-all -U "${PGUSER}" -P XXXXXXX -H "${PGHOST}" -D "${PGDB}"
          datamodel_postgres_admin create-all -U "${PGUSER}" -P "${PGPASSWORD}" -H "${PGHOST}" -D "${PGDB}"

          echo python /sheepdog/bin/setup_transactionlogs.py --user "${PGUSER}"  --password XXXXX --host "${PGHOST}" --database "${PGDB}"
          python /sheepdog/bin/setup_transactionlogs.py --user "${PGUSER}"  --password "${PGPASSWORD}" --host "${PGHOST}" --database "${PGDB}"
        command:
        - /bin/bash
        env:
        - name: DICTIONARY_URL
          value: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              key: host
              name: sheepdog-dbcreds
              optional: false
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: username
              name: sheepdog-dbcreds
              optional: false
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: sheepdog-dbcreds
              optional: false
        - name: PGDB
          valueFrom:
            secretKeyRef:
              key: database
              name: sheepdog-dbcreds
              optional: false
        - name: DBREADY
          valueFrom:
            secretKeyRef:
              key: dbcreated
              name: sheepdog-dbcreds
              optional: false
        - name: CONF_HOSTNAME
          value: cloud08
        image: quay.io/cdis/sheepdog:helm-test
        imagePullPolicy: IfNotPresent
        name: sheepdog-init
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config-volume
        secret:
          defaultMode: 420
          secretName: sheepdog-secret
      - configMap:
          defaultMode: 420
          name: config-helper
        name: config-helper
