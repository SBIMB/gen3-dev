apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    meta.helm.sh/release-name: gen3-dev
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2023-12-11T21:35:12Z"
  generation: 1
  labels:
    app: fence
    app.kubernetes.io/instance: gen3-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fence
    app.kubernetes.io/part-of: Authentication
    app.kubernetes.io/version: 0.1.14
    critical-service: "true"
    release: production
  name: fence-deployment
  namespace: default
  resourceVersion: "258072"
  uid: d80b9d2d-9aa9-49a6-aafd-ee01d7a207a5
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: fence
      app.kubernetes.io/instance: gen3-dev
      app.kubernetes.io/name: fence
      release: production
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: fence
        app.kubernetes.io/instance: gen3-dev
        app.kubernetes.io/name: fence
        release: production
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fence
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - -c
        - |
          echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
          python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
          if [[ -f /fence/keys/key/jwt_private_key.pem ]]; then
            openssl rsa -in /fence/keys/key/jwt_private_key.pem -pubout > /fence/keys/key/jwt_public_key.pem
          fi
          bash /fence/dockerrun.bash && if [[ -f /dockerrun.sh ]]; then bash /dockerrun.sh; fi
        command:
        - /bin/bash
        env:
        - name: GEN3_UWSGI_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: uwsgi-timeout
              name: manifest-global
              optional: true
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: AWS_STS_REGIONAL_ENDPOINTS
          value: regional
        - name: PYTHONPATH
          value: /var/www/fence
        - name: GEN3_DEBUG
          value: "False"
        - name: FENCE_PUBLIC_CONFIG
          valueFrom:
            configMapKeyRef:
              key: fence-config-public.yaml
              name: manifest-fence
              optional: true
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              key: host
              name: fence-dbcreds
              optional: false
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: username
              name: fence-dbcreds
              optional: false
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: fence-dbcreds
              optional: false
        - name: PGDB
          valueFrom:
            secretKeyRef:
              key: database
              name: fence-dbcreds
              optional: false
        - name: DBREADY
          valueFrom:
            secretKeyRef:
              key: dbcreated
              name: fence-dbcreds
              optional: false
        - name: DB
          value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDB)
        - name: INDEXD_PASSWORD
          valueFrom:
            secretKeyRef:
              key: fence
              name: indexd-service-creds
        - name: gen3Env
          valueFrom:
            configMapKeyRef:
              key: hostname
              name: manifest-global
        image: quay.io/cdis/fence:master
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /_status
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 30
        name: fence
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 6567
          name: container
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /_status
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 300m
            memory: 128Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/www/fence/local_settings.py
          name: old-config-volume
          readOnly: true
          subPath: local_settings.py
        - mountPath: /var/www/fence/fence_credentials.json
          name: json-secret-volume
          readOnly: true
          subPath: fence_credentials.json
        - mountPath: /var/www/fence/creds.json
          name: creds-volume
          readOnly: true
          subPath: creds.json
        - mountPath: /var/www/fence/config_helper.py
          name: config-helper
          readOnly: true
          subPath: config_helper.py
        - mountPath: /fence/fence/static/img/logo.svg
          name: logo-volume
          readOnly: true
          subPath: logo.svg
        - mountPath: /fence/fence/static/privacy_policy.md
          name: privacy-policy
          readOnly: true
          subPath: privacy_policy.md
        - mountPath: /var/www/fence/fence-config.yaml
          name: config-volume
          readOnly: true
          subPath: fence-config.yaml
        - mountPath: /var/www/fence/yaml_merge.py
          name: yaml-merge
          readOnly: true
          subPath: yaml_merge.py
        - mountPath: /var/www/fence/fence_google_app_creds_secret.json
          name: fence-google-app-creds-secret-volume
          readOnly: true
          subPath: fence_google_app_creds_secret.json
        - mountPath: /var/www/fence/fence_google_storage_creds_secret.json
          name: fence-google-storage-creds-secret-volume
          readOnly: true
          subPath: fence_google_storage_creds_secret.json
        - mountPath: /fence/keys/key/jwt_private_key.pem
          name: fence-jwt-keys
          readOnly: true
          subPath: jwt_private_key.pem
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      initContainers:
      - args:
        - -c
        - |
          # echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
          # python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
          if fence-create migrate --help > /dev/null 2>&1; then
            if ! grep -E 'ENABLE_DB_MIGRATION"?: *false' /var/www/fence/fence-config.yaml; then
              echo "Running db migration: fence-create migrate"
              cd /fence
              fence-create migrate
            else
              echo "Db migration disabled in fence-config"
            fi
          else
            echo "Db migration not available in this version of fence"
          fi
        command:
        - /bin/bash
        env:
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              key: host
              name: fence-dbcreds
              optional: false
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              key: username
              name: fence-dbcreds
              optional: false
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: fence-dbcreds
              optional: false
        - name: PGDB
          valueFrom:
            secretKeyRef:
              key: database
              name: fence-dbcreds
              optional: false
        - name: DBREADY
          valueFrom:
            secretKeyRef:
              key: dbcreated
              name: fence-dbcreds
              optional: false
        - name: DB
          value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDB)
        - name: FENCE_DB
          value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDB)
        - name: PYTHONPATH
          value: /var/www/fence
        - name: FENCE_PUBLIC_CONFIG
          valueFrom:
            configMapKeyRef:
              key: fence-config-public.yaml
              name: manifest-fence
              optional: true
        image: quay.io/cdis/fence:master
        imagePullPolicy: Always
        name: fence-init
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 6567
          name: container
          protocol: TCP
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 300m
            memory: 128Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/www/fence/fence-config.yaml
          name: config-volume
          readOnly: true
          subPath: fence-config.yaml
        - mountPath: /var/www/fence/yaml_merge.py
          name: yaml-merge
          readOnly: true
          subPath: yaml_merge.py
        - mountPath: /var/www/fence/fence_google_app_creds_secret.json
          name: fence-google-app-creds-secret-volume
          readOnly: true
          subPath: fence_google_app_creds_secret.json
        - mountPath: /var/www/fence/fence_google_storage_creds_secret.json
          name: fence-google-storage-creds-secret-volume
          readOnly: true
          subPath: fence_google_storage_creds_secret.json
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: fence-sa
      serviceAccountName: fence-sa
      terminationGracePeriodSeconds: 30
      volumes:
      - name: old-config-volume
        secret:
          defaultMode: 420
          secretName: fence-secret
      - name: json-secret-volume
        secret:
          defaultMode: 420
          optional: true
          secretName: fence-json-secret
      - name: creds-volume
        secret:
          defaultMode: 420
          secretName: fence-creds
      - configMap:
          defaultMode: 420
          name: config-helper
          optional: true
        name: config-helper
      - configMap:
          defaultMode: 420
          name: logo-config
        name: logo-volume
      - name: config-volume
        secret:
          defaultMode: 420
          secretName: fence-config
      - name: fence-google-app-creds-secret-volume
        secret:
          defaultMode: 420
          secretName: fence-google-app-creds-secret
      - name: fence-google-storage-creds-secret-volume
        secret:
          defaultMode: 420
          secretName: fence-google-storage-creds-secret
      - name: fence-jwt-keys
        secret:
          defaultMode: 420
          secretName: fence-jwt-keys
      - configMap:
          defaultMode: 420
          name: privacy-policy
        name: privacy-policy
      - configMap:
          defaultMode: 420
          name: fence-yaml-merge
          optional: true
        name: yaml-merge
