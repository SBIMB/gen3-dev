apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-dev
  namespace: "minio-dev"
  labels:
    app.kubernetes.io/instance: minio-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.2.26
    helm.sh/chart: minio-13.7.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: minio-dev
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: minio-dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        app.kubernetes.io/version: 2024.2.26
        helm.sh/chart: minio-13.7.0
      annotations:
        checksum/credentials-secret: 47cc08dc7504369d4ed2465dc0a05fed4fadf6456b0b00145aff59b839309005
    spec:

      serviceAccountName: minio-dev
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: minio-dev
                  app.kubernetes.io/name: minio
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity:

      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: []
        sysctls: []
      containers:
      - name: minio
        image: docker.io/bitnami/minio:2024.2.26-debian-12-r0
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 1001
          seLinuxOptions: null
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MINIO_SCHEME
          value: "http"
        - name: MINIO_FORCE_NEW_KEYS
          value: "no"
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-dev
              key: root-user
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-dev
              key: root-password
        - name: MINIO_BROWSER
          value: "on"
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        - name: MINIO_CONSOLE_PORT_NUMBER
          value: "9001"
        - name: MINIO_DATA_DIR
          value: "/bitnami/minio/data"
        envFrom:
        ports:
        - name: minio-api
          containerPort: 9000
          protocol: TCP
        - name: minio-console
          containerPort: 9001
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: minio-api
            scheme: "HTTP"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          tcpSocket:
            port: minio-api
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: empty-dir
          mountPath: /tmp
          subPath: tmp-dir
        - name: empty-dir
          mountPath: /opt/bitnami/minio/tmp
          subPath: app-tmp-dir
        - name: empty-dir
          mountPath: /.mc
          subPath: app-mc-dir
        - name: data
          mountPath: /bitnami/minio/data
      volumes:
      - name: empty-dir
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: minio-dev
